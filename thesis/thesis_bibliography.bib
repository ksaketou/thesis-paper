@inproceedings{10.1145/3283812.3283819,
author = {Gonzalez, Danielle and Prentice, Suzanne and Mirakhorli, Mehdi},
title = {A Fine-Grained Approach for Automated Conversion of JUnit Assertions to English},
year = {2018},
isbn = {9781450360555},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3283812.3283819},
doi = {10.1145/3283812.3283819},
abstract = {Converting source or unit test code to English has been shown to improve the maintainability, understandability, and analysis of software and tests. Code summarizers identify 'important' statements in the source/tests and convert them to easily understood English sentences using static analysis and NLP techniques. However, current test summarization approaches handle only a subset of the variation and customization allowed in the JUnit assert API (a critical component of test cases) which may affect the accuracy of conversions. In this paper, we present our work towards improving JUnit test summarization with a detailed process for converting a total of 45 unique JUnit assertions to English, including 37 previously-unhandled variations of the assertThat method. This process has also been implemented and released as the AssertConvert tool. Initial evaluations have shown that this tool generates English conversions that accurately represent a wide variety of assertion statements which could be used for code summarization or other NLP analyses.},
booktitle = {Proceedings of the 4th ACM SIGSOFT International Workshop on NLP for Software Engineering},
pages = {14–17},
numpages = {4},
keywords = {JUnit, NLP, Code Summarization, Software Testing},
location = {Lake Buena Vista, FL, USA},
series = {NL4SE 2018}
}
@inproceedings{zhang2014systematic,
  title={A systematic approach to automatically derive test cases from use cases specified in restricted natural languages},
  author={Zhang, Man and Yue, Tao and Ali, Shaukat and Zhang, Huihui and Wu, Ji},
  booktitle={International Conference on System Analysis and Modeling},
  pages={142--157},
  year={2014},
  organization={Springer}
}
@inproceedings{10.1145/3278186.3278194,
author = {Santiago, Dionny and Clarke, Peter J. and Alt, Patrick and King, Tariq M.},
title = {Abstract Flow Learning for Web Application Test Generation},
year = {2018},
isbn = {9781450360531},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3278186.3278194},
abstract = {Achieving high software quality today involves manual analysis, test planning, documentation of testing strategy and test cases, and the development of scripts to support automated regression testing. To keep pace with software evolution, test artifacts must also be frequently updated. Although test automation practices help mitigate the cost of regression testing, a large gap exists between the current paradigm and fully automated software testing. Researchers and practitioners are realizing the potential for artificial intelligence and machine learning (ML) to help bridge the gap between the testing capabilities of humans and those of machines. This paper presents an ML approach that combines a language specification that includes a grammar that can be used to describe test flows, and a trainable test flow generation model, in order to generate tests in a way that is trainable, reusable across different applications, and generalizable to new applications.},
booktitle = {Proceedings of the 9th ACM SIGSOFT International Workshop on Automating TEST Case Design, Selection, and Evaluation},
pages = {49–55},
numpages = {7}
}
@inproceedings{mai2018natural,
  title={A natural language programming approach for requirements-based security testing},
  author={Mai, Xuan Phu and Pastore, Fabrizio and G{\"o}knil, Arda and Briand, Lionel},
  booktitle={29th IEEE International Symposium on Software Reliability Engineering (ISSRE 2018)},
  year={2018},
  organization={IEEE}
}
@inproceedings{soeken2012assisted,
  title={Assisted behavior driven development using natural language processing},
  author={Soeken, Mathias and Wille, Robert and Drechsler, Rolf},
  booktitle={International Conference on Modelling Techniques and Tools for Computer Performance Evaluation},
  pages={269--287},
  year={2012},
  organization={Springer}
}
@article{wang2020automatic,
  title={Automatic generation of acceptance test cases from use case specifications: an nlp-based approach},
  author={Wang, Chunhui and Pastore, Fabrizio and Goknil, Arda and Briand, Lionel},
  journal={IEEE Transactions on Software Engineering},
  year={2020},
  publisher={IEEE}
}
@phdthesis{rane2017automatic,
  title={Automatic generation of test cases for agile using natural language processing},
  author={Rane, Prerana Pradeepkumar},
  year={2017},
  school={Virginia Tech}
}
@inproceedings{kamalakar2013automatically,
  title={Automatically Generating Tests from Natural Language Descriptions of Software Behavior.},
  author={Kamalakar, Sunil and Edwards, Stephen H and Dao, Tung M},
  booktitle={8th International Conference on Evaluation of Novel Approaches to Software Engineering (ENASE-2013)},
  pages={238--245},
  year={2013}
}
@article{arruda2020automation,
  title={Automation and consistency analysis of test cases written in natural language: An industrial context},
  author={Arruda, Filipe and Barros, Fl{\'a}via and Sampaio, Augusto},
  journal={Science of Computer Programming},
  volume={189},
  pages={102377},
  year={2020},
  publisher={Elsevier}
}
@inproceedings{10.1145/3195538.3195540,
author = {Tahvili, Sahar and Hatvani, Leo and Felderer, Michael and Afzal, Wasif and Saadatmand, Mehrdad and Bohlin, Markus},
title = {Cluster-Based Test Scheduling Strategies Using Semantic Relationships between Test Specifications},
year = {2018},
isbn = {9781450357494},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3195538.3195540},
doi = {10.1145/3195538.3195540},
abstract = {One of the challenging issues in improving the test efficiency is that of achieving a balance between testing goals and testing resources. Test execution scheduling is one way of saving time and budget, where a set of test cases are grouped and tested at the same time. To have an optimal test execution schedule, all related information of a test case (e.g. execution time, functionality to be tested, dependency and similarity with other test cases) need to be analyzed. Test scheduling problem becomes more complicated at high-level testing, such as integration testing and especially in manual testing procedure. Test specifications are generally written in natural text by humans and usually contain ambiguity and uncertainty. Therefore, analyzing a test specification demands a strong learning algorithm. In this position paper, we propose a natural language processing-based approach that, given test specifications at the integration level, allows automatic detection of test cases semantic dependencies. The proposed approach utilizes the Doc2Vec algorithm and converts each test case into a vector in n-dimensional space. These vectors are then grouped using the HDBSCAN clustering algorithm into semantic clusters. Finally, a set of cluster-based test scheduling strategies are proposed for execution. The proposed approach has been applied in a sub-system from the railway domain by analyzing an ongoing testing project at Bombardier Transportation AB, Sweden.},
booktitle = {Proceedings of the 5th International Workshop on Requirements Engineering and Testing},
pages = {1–4},
numpages = {4},
keywords = {NLP, software testing, Doc2Vec, clustering, HDBSCAN, test optimization, dependency},
location = {Gothenburg, Sweden},
series = {RET '18}
}
@inproceedings{10.1145/3368089.3417067,
author = {Li, Linyi and Li, Zhenwen and Zhang, Weijie and Zhou, Jun and Wang, Pengcheng and Wu, Jing and He, Guanghua and Zeng, Xia and Deng, Yuetang and Xie, Tao},
title = {Clustering Test Steps in Natural Language toward Automating Test Automation},
year = {2020},
isbn = {9781450370431},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3368089.3417067},
doi = {10.1145/3368089.3417067},
abstract = {For large industrial applications, system test cases are still often described in natural language (NL), and their number can reach thousands. Test automation is to automatically execute the test cases. Achieving test automation typically requires substantial manual effort for creating executable test scripts from these NL test cases. In particular, given that each NL test case consists of a sequence of NL test steps, testers first implement a test API method for each test step and then write a test script for invoking these test API methods sequentially for test automation. Across different test cases, multiple test steps can share semantic similarities, supposedly mapped to the same API method. However, due to numerous test steps in various NL forms under manual inspection, testers may not realize those semantically similar test steps and thus waste effort to implement duplicate test API methods for them. To address this issue, in this paper, we propose a new approach based on natural language processing to cluster similar NL test steps together such that the test steps in each cluster can be mapped to the same test API method. Our approach includes domain-specific word embedding training along with measurement based on Relaxed Word Mover’sDistance to analyze the similarity of test steps. Our approach also includes a technique to combine hierarchical agglomerative clustering and K-means clustering post-refinement to derive high-quality and manually-adjustable clustering results. The evaluation results of our approach on a large industrial mobile app, WeChat, show that our approach can cluster the test steps with high accuracy, substantially reducing the number of clusters and thus reducing the downstream manual effort. In particular, compared with the baseline approach, our approach achieves 79.8% improvement on cluster quality, reducing 65.9% number of clusters, i.e., the number of test API methods to be implemented.},
booktitle = {Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {1285–1295},
numpages = {11},
keywords = {natural language processing, software testing, Clustering},
location = {Virtual Event, USA},
series = {ESEC/FSE 2020}
}
@inproceedings{wong2015dase,
  title={Dase: Document-assisted symbolic execution for improving automated software testing},
  author={Wong, Edmund and Zhang, Lei and Wang, Song and Liu, Taiyue and Tan, Lin},
  booktitle={2015 IEEE/ACM 37th IEEE International Conference on Software Engineering},
  volume={1},
  pages={620--631},
  year={2015},
  organization={IEEE}
}
@inproceedings{reqclass,
author = {Sainani, Abhishek and Rose, Preethu and Joshi, Vivek and Ghaisas, Smita},
booktitle = {2020 IEEE 28th International Requirements Engineering Conference (RE)},
year = {2020},
month = {08},
pages = {147-157},
title = {Extracting and Classifying Requirements from Software Engineering Contracts},
doi = {10.1109/RE48521.2020.00026}
}
@incollection{mueller2010generation,
  title={Generation of executable testbenches from natural language requirement specifications for embedded real-time systems},
  author={Mueller, Wolfgang and Bol, Alexander and Krupp, Alexander and Lundkvist, Ola},
  booktitle={Distributed, Parallel and Biologically Inspired Systems},
  pages={78--89},
  year={2010},
  publisher={Springer}
}
@inproceedings{yue2015rtcm,
  title={RTCM: a natural language based, automated, and practical test case generation framework},
  author={Yue, Tao and Ali, Shaukat and Zhang, Man},
  booktitle={Proceedings of the 2015 international symposium on software testing and analysis},
  pages={397--408},
  year={2015}
}
@inproceedings{masuda2016syntactic,
  title={Syntactic rules of extracting test cases from software requirements},
  author={Masuda, Satoshi and Matsuodani, Tohru and Tsuda, Kazuhiko},
  booktitle={Proceedings of the 2016 8th International Conference on Information Management and Engineering},
  pages={12--17},
  year={2016}
}
@inproceedings{singh1997test,
  title={Test case design based on Z and the classification-tree method},
  author={Singh, Harbhajan and Conrad, Mirko and Sadeghipour, Sadegh},
  booktitle={First IEEE International Conference on Formal Engineering Methods},
  pages={81--90},
  year={1997},
  organization={IEEE}
}
@article{carvalho2014nat2testscr,
  title={NAT2TESTSCR: Test case generation from natural language requirements based on SCR specifications},
  author={Carvalho, Gustavo and Falcao, Diogo and Barros, Fl{\'a}via and Sampaio, Augusto and Mota, Alexandre and Motta, Leonardo and Blackburn, Mark},
  journal={Science of Computer Programming},
  volume={95},
  pages={275--297},
  year={2014},
  publisher={Elsevier}
}
@inproceedings{chen2021test,
  title={Test Case Reuse based on ESIM Model},
  author={Chen, Xiaomeng and Wang, Jinbo and Zhou, Shan and Xue, Panpan and Jia, Jiao},
  booktitle={2021 8th International Conference on Dependable Systems and Their Applications (DSA)},
  pages={700--705},
  year={2021},
  organization={IEEE}
}
@article{sarmiento2016test,
  title={Test scenario generation from natural language requirements descriptions based on petri-nets},
  author={Sarmiento, Edgar and Leite, Julio CSP and Almentero, Eduardo and Alzamora, Guina Sotomayor},
  journal={Electronic Notes in Theoretical Computer Science},
  volume={329},
  pages={123--148},
  year={2016},
  publisher={Elsevier}
}
@inproceedings{sinha2010text2test,
  title={Text2Test: Automated inspection of natural language use cases},
  author={Sinha, Avik and Sutton, Stanley M and Paradkar, Amit},
  booktitle={2010 Third International Conference on Software Testing, Verification and Validation},
  pages={155--164},
  year={2010},
  organization={IEEE}
}
@inproceedings{eberhardinger2017toward,
  title={Toward adaptive, self-aware test automation},
  author={Eberhardinger, Benedikt and Habermaier, Axel and Reif, Wolfgang},
  booktitle={2017 IEEE/ACM 12th International Workshop on Automation of Software Testing (AST)},
  pages={34--37},
  year={2017},
  organization={IEEE}
}
@inproceedings{pedemonte2012towards,
  title={Towards automatic functional test execution},
  author={Pedemonte, Pablo and Mahmud, Jalal and Lau, Tessa},
  booktitle={Proceedings of the 2012 ACM international conference on Intelligent User Interfaces},
  pages={227--236},
  year={2012}
}
@inproceedings{litmus,
author = {Dwarakanath, Anurag and Sengupta, Shubhashis},
year = {2012},
booktitle = {17th international conference on Applications of Natural Language Processing and Information Systems},
month = {06},
pages = {58-69},
title = {Litmus: Generation of Test Cases from Functional Requirements in Natural Language},
isbn = {978-3-642-31177-2},
doi = {10.1007/978-3-642-31178-9_6}
}
@article{gutierrez2015model,
  title={A model-driven approach for functional test case generation},
  author={Guti{\'e}rrez, JJ and Escalona, MJ and Mej{\'\i}as, M},
  journal={Journal of Systems and Software},
  volume={109},
  pages={214--228},
  year={2015},
  publisher={Elsevier}
}
@article{zhao2021natural,
  title={Natural language processing for requirements engineering: A systematic mapping study},
  author={Zhao, Liping and Alhoshan, Waad and Ferrari, Alessio and Letsholo, Keletso J and Ajagbe, Muideen A and Chioasca, Erol-Valeriu and Batista-Navarro, Riza T},
  journal={ACM Computing Surveys (CSUR)},
  volume={54},
  number={3},
  pages={1--41},
  year={2021},
  publisher={ACM New York, NY, USA}
}
@article{garousi2020nlp,
  title={NLP-assisted software testing: A systematic mapping of the literature},
  author={Garousi, Vahid and Bauer, Sara and Felderer, Michael},
  journal={Information and Software Technology},
  volume={126},
  pages={106321},
  year={2020},
  publisher={Elsevier}
}
@inproceedings{inproceedings,
author = {Gröpler, Robin and Sudhi, Viju and José, Emilio and García, Calleja and Bergmann, Andre},
year = {2021},
booktitle = {29th international Workshop on Concurrency, Specification and Programming (CS\&P'21)At: Berlin, Germany},
month = {09},
pages = {},
title = {NLP-Based Requirements Formalization for Automatic Test Case Generation}
}
@inproceedings{9609160,
  author={Kirinuki, Hiroyuki and Matsumoto, Shinsuke and Higo, Yoshiki and Kusumoto, Shinji},
  booktitle={2021 IEEE International Conference on Software Maintenance and Evolution (ICSME)}, 
  title={NLP-assisted Web Element Identification Toward Script-free Testing}, 
  year={2021},
  volume={},
  number={},
  pages={639-643},
  doi={10.1109/ICSME52107.2021.00072}
}
@INPROCEEDINGS{9491761,
  author={Lafi, Mohammed and Alrawashed, Thamer and Hammad, Ahmad Munir},
  booktitle={2021 International Conference on Information Technology (ICIT)}, 
  title={Automated Test Cases Generation From Requirements Specification}, 
  year={2021},
  volume={},
  number={},
  pages={852-857},
  doi={10.1109/ICIT52682.2021.9491761}
}
@INPROCEEDINGS{9354325,
  author={Broer Bahaweres, Rizal and Oktaviani, Elda and Kesuma Wardhani, Luh and Hermadi, Irman and Suroso, ArifImam and Permana Solihin, Indra and Arkeman, Yandra},
  booktitle={2020 International Conference on Informatics, Multimedia, Cyber and Information System (ICIMCIS)}, 
  title={Behavior-driven development (BDD) Cucumber Katalon for Automation GUI testing case CURA and Swag Labs}, 
  year={2020},
  volume={},
  number={},
  pages={87-92},
  doi={10.1109/ICIMCIS51567.2020.9354325}
}
@INPROCEEDINGS{7972390,
  author={Ansari, Ahlam and Shagufta, Mirza Baig and Sadaf Fatima, Ansari and Tehreem, Shaikh},
  booktitle={2017 Third International Conference on Advances in Electrical, Electronics, Information, Communication and Bio-Informatics (AEEICB)}, 
  title={Constructing Test cases using Natural Language Processing}, 
  year={2017},
  volume={},
  number={},
  pages={95-99},
  doi={10.1109/AEEICB.2017.7972390}
}
@INPROCEEDINGS{9197868,
  author={Rajaraman, R and Kapur, P K and Kumar, Deepak},
  booktitle={2020 8th International Conference on Reliability, Infocom Technologies and Optimization (Trends and Future Directions) (ICRITO)}, 
  title={Determining Software Inter-Dependency Patterns for Integration Testing by applying Machine learning on Logs and Telemetry data}, 
  year={2020},
  volume={},
  number={},
  pages={1080-1084},
  doi={10.1109/ICRITO48877.2020.9197868}
}
@INPROCEEDINGS{9623005,
  author={Chen, Xiaomeng and Wang, Jinbo and Zhou, Shan and Xue, Panpan and Jia, Jiao},
  booktitle={2021 8th International Conference on Dependable Systems and Their Applications (DSA)}, 
  title={Test Case Reuse based on ESIM Model}, 
  year={2021},
  volume={},
  number={},
  pages={700-705},
  doi={10.1109/DSA52907.2021.00101}
}
@INPROCEEDINGS{5587779,
  author={Kumar, Pawan and Kumar Rathaur, Arun and Ahmad, Rashid and Sinha, Mukul K and Sangal, Rajeev},
  booktitle={Proceedings of the 6th International Conference on Natural Language Processing and Knowledge Engineering(NLPKE-2010)}, 
  title={Dashboard: An integration and testing platform based on backboard architecture for NLP applications}, 
  year={2010},
  volume={},
  number={},
  pages={1-8},
  doi={10.1109/NLPKE.2010.5587779}
}
@INPROCEEDINGS{9159104,
  author={BERNARD, Elodie and BOTELLA, Julien and AMBERT, Fabrice and LEGEARD, Bruno and UTTING, Mark},
  booktitle={2020 IEEE 13th International Conference on Software Testing, Validation and Verification (ICST)}, 
  title={Tool Support for Refactoring Manual Tests}, 
  year={2020},
  volume={},
  number={},
  pages={332-342},
  doi={10.1109/ICST46399.2020.00041}
}
@INPROCEEDINGS{8051381,
  author={Tahvili, Sahar and Saadatmand, Mehrdad and Bohlin, Markus and Afzal, Wasif and Ameerjan, Sharvathul Hasan},
  booktitle={2017 43rd Euromicro Conference on Software Engineering and Advanced Applications (SEAA)}, 
  title={Towards Execution Time Prediction for Manual Test Cases from Test Specification}, 
  year={2017},
  volume={},
  number={},
  pages={421-425},
  doi={10.1109/SEAA.2017.10}
}
@ARTICLE{9617598,
  author={Yang, Yuxuan and Chen, Xin},
  journal={IEEE Access}, 
  title={Crowdsourced Test Report Prioritization Based on Text Classification}, 
  year={2021},
  volume={},
  number={},
  pages={1-1},
  doi={10.1109/ACCESS.2021.3128726}
}
